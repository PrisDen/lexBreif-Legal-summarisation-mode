from flask import Flask, render_template, request, jsonify, send_from_directory
from flask_cors import CORS
import os
import json
from werkzeug.utils import secure_filename

app = Flask(__name__, 
            static_folder='../static',
            template_folder='../static')
CORS(app)

# Configure upload folder
UPLOAD_FOLDER = 'uploads'
ALLOWED_EXTENSIONS = {'pdf', 'docx', 'txt'}

if not os.path.exists(UPLOAD_FOLDER):
    os.makedirs(UPLOAD_FOLDER)

app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER
app.config['MAX_CONTENT_LENGTH'] = 10 * 1024 * 1024  # 10MB max file size

def allowed_file(filename):
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS

def create_response(data=None, error=None, status=200):
    response = {
        'success': error is None,
        'data': data,
        'error': error
    }
    return jsonify(response), status

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/static/<path:filename>')
def serve_static(filename):
    return send_from_directory(app.static_folder, filename)

@app.route('/summarize', methods=['POST'])
def summarize():
    try:
        if 'document' not in request.files:
            return create_response(error='No file provided', status=400)
        
        file = request.files['document']
        if file.filename == '':
            return create_response(error='No file selected', status=400)
        
        if not allowed_file(file.filename):
            return create_response(error='File type not allowed. Please upload PDF, DOCX, or TXT files.', status=400)
        
        # Save the file temporarily
        filename = secure_filename(file.filename)
        filepath = os.path.join(app.config['UPLOAD_FOLDER'], filename)
        file.save(filepath)
        
        # TODO: Add your document processing logic here
        # For now, returning mock data
        mock_data = {
            'summary': 'This is a mock summary of the document. The actual summary will be generated by the document processing logic.',
            'dates': ['2024-01-01', '2024-02-15', '2024-03-20'],
            'importance': {
                'high': [
                    'Important legal clause regarding contract termination',
                    'Key financial obligations and deadlines',
                    'Critical compliance requirements'
                ],
                'medium': [
                    'Standard contractual terms and conditions',
                    'General business procedures',
                    'Common industry practices'
                ],
                'low': [
                    'Background information',
                    'Standard definitions',
                    'General references'
                ]
            }
        }
        
        # Clean up the uploaded file
        if os.path.exists(filepath):
            os.remove(filepath)
        
        return create_response(data=mock_data)
        
    except Exception as e:
        # Clean up file if it exists
        if 'filepath' in locals() and os.path.exists(filepath):
            os.remove(filepath)
        return create_response(error=str(e), status=500)

if __name__ == '__main__':
    app.run(debug=True, port=5001, ssl_context='adhoc') 